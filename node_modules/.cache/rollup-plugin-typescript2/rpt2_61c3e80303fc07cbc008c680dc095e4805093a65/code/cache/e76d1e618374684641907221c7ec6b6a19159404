{"code":"export var Direction;\n(function (Direction) {\n    Direction[\"top\"] = \"top\";\n    Direction[\"right\"] = \"right\";\n    Direction[\"bottom\"] = \"bottom\";\n    Direction[\"left\"] = \"left\";\n})(Direction || (Direction = {}));\nexport var TileType;\n(function (TileType) {\n    TileType[TileType[\"Cross\"] = 0] = \"Cross\";\n    TileType[TileType[\"Empty\"] = 1] = \"Empty\";\n    TileType[TileType[\"TUp\"] = 2] = \"TUp\";\n    TileType[TileType[\"TDown\"] = 3] = \"TDown\";\n    TileType[TileType[\"TLeft\"] = 4] = \"TLeft\";\n    TileType[TileType[\"TRight\"] = 5] = \"TRight\";\n    TileType[TileType[\"LineHorizontal\"] = 6] = \"LineHorizontal\";\n    TileType[TileType[\"LineVertical\"] = 7] = \"LineVertical\";\n    TileType[TileType[\"LUpRight\"] = 8] = \"LUpRight\";\n    TileType[TileType[\"LUpLeft\"] = 9] = \"LUpLeft\";\n    TileType[TileType[\"LDownRight\"] = 10] = \"LDownRight\";\n    TileType[TileType[\"LDownLeft\"] = 11] = \"LDownLeft\";\n})(TileType || (TileType = {}));\nexport class Tile {\n    constructor(type, image) {\n        this.TILE_CONNECTIONS = {\n            [TileType.Cross]: { top: true, right: true, bottom: true, left: true },\n            [TileType.Empty]: { top: false, right: false, bottom: false, left: false },\n            [TileType.TUp]: { top: true, right: true, bottom: false, left: true },\n            [TileType.TDown]: { top: false, right: true, bottom: true, left: true },\n            [TileType.TLeft]: { top: true, right: false, bottom: true, left: true },\n            [TileType.TRight]: { top: true, right: true, bottom: true, left: false },\n            [TileType.LineHorizontal]: {\n                top: false,\n                right: true,\n                bottom: false,\n                left: true,\n            },\n            [TileType.LineVertical]: {\n                top: true,\n                right: false,\n                bottom: true,\n                left: false,\n            },\n            [TileType.LUpRight]: { top: true, right: true, bottom: false, left: false },\n            [TileType.LUpLeft]: { top: true, right: false, bottom: false, left: true },\n            [TileType.LDownRight]: {\n                top: false,\n                right: true,\n                bottom: true,\n                left: false,\n            },\n            [TileType.LDownLeft]: {\n                top: false,\n                right: false,\n                bottom: true,\n                left: true,\n            },\n        };\n        this.type = type;\n        this.image = this.setImage(image);\n        this.canTouch = this.calculateNeighbours(type);\n    }\n    setImage(source) {\n        const image = new Image();\n        image.src = source;\n        return image;\n    }\n    getAllowedDirections() {\n        return Object.keys(this.TILE_CONNECTIONS[this.type]).filter((direction) => this.TILE_CONNECTIONS[this.type][direction]);\n    }\n    calculateNeighbours(type) {\n        return {\n            top: this.getMatchingTypes(type, Direction.top),\n            right: this.getMatchingTypes(type, Direction.right),\n            bottom: this.getMatchingTypes(type, Direction.bottom),\n            left: this.getMatchingTypes(type, Direction.left),\n        };\n    }\n    // Returns all tile types that can be connected by matching opposite directions states.\n    getMatchingTypes(type, direction) {\n        return Object.keys(this.TILE_CONNECTIONS)\n            .map(Number)\n            .filter((otherType) => {\n            return ((this.TILE_CONNECTIONS[type][direction] &&\n                this.TILE_CONNECTIONS[otherType][this.oppositeDirection(direction)]) ||\n                (!this.TILE_CONNECTIONS[type][direction] &&\n                    !this.TILE_CONNECTIONS[otherType][this.oppositeDirection(direction)]));\n        });\n    }\n    oppositeDirection(direction) {\n        const oppositeMap = {\n            top: \"bottom\",\n            right: \"left\",\n            bottom: \"top\",\n            left: \"right\",\n        };\n        return oppositeMap[direction];\n    }\n}\n//# sourceMappingURL=Tile.js.map","references":[],"map":"{\"version\":3,\"file\":\"Tile.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/Tile.ts\"],\"names\":[],\"mappings\":\"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\"}"}
