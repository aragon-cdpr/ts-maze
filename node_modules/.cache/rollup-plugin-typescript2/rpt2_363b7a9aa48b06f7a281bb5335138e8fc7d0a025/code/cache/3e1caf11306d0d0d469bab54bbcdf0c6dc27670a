{"code":"import { __awaiter } from \"tslib\";\nimport { TileType } from \"./Tile\";\nexport const drawGrid = (tiles, plane, TilesCount) => __awaiter(void 0, void 0, void 0, function* () {\n    const loadImagePromises = tiles.map((tile) => {\n        return new Promise((resolve) => {\n            tile.image.onload = () => {\n                resolve(tile.image); // Resolving when image is loaded\n            };\n        });\n    });\n    const helper = new Array(plane.length).fill(tiles.length);\n    const upgradeNeighbours = (index, tile, dir) => {\n        if (plane[index] !== undefined && Array.isArray(plane[index])) {\n            plane[index] = tile.canTouch[dir].filter((item) => plane[index].includes(item));\n            helper[index] = plane[index].length;\n        }\n        else if (plane[index] === undefined) {\n            helper[index] = tile.canTouch[dir].length;\n            plane[index] = tile.canTouch[dir];\n        }\n    };\n    // Wait for all images to be loaded\n    yield Promise.all(loadImagePromises);\n    for (let i = 0; i < plane.length; i++) {\n        let cell = -1;\n        if (i == 0) {\n            cell = (Math.random() * plane.length) | 0;\n            if (plane[cell] === undefined) {\n                plane[cell] = Object.keys(TileType).filter((type) => !isNaN(Number(type)));\n            }\n        }\n        else {\n            cell = helper.indexOf(Math.min(...helper));\n        }\n        const randomindex = (Math.random() * plane[cell].length) | 0;\n        const tile = tiles[plane[cell][randomindex]];\n        plane[cell] = tile;\n        helper[cell] = 1000;\n        if (cell + TilesCount <= plane.length - 1) {\n            const index = cell + TilesCount;\n            upgradeNeighbours(index, tile, \"bottom\");\n        }\n        if (cell - 1 >= 0 && cell % TilesCount !== 0) {\n            const index = cell - 1;\n            upgradeNeighbours(index, tile, \"left\");\n        }\n        if (cell + 1 <= plane.length - 1 && (cell + 1) % TilesCount !== 0) {\n            const index = cell + 1;\n            upgradeNeighbours(index, tile, \"right\");\n        }\n        if (cell - TilesCount >= 0) {\n            const index = cell - TilesCount;\n            upgradeNeighbours(index, tile, \"top\");\n        }\n    }\n});\n//# sourceMappingURL=utils.js.map","references":["/Users/rafal.tomaszewski/projects/ts/maze/src/Tile.ts"],"map":"{\"version\":3,\"file\":\"utils.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/utils.ts\"],\"names\":[],\"mappings\":\"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\"}"}
